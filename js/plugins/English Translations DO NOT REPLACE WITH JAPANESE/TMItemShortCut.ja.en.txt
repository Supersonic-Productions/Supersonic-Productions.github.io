 // ================================================ =============================
// TMPlugin-Item shortcut
// Version: 1.0.2
// Last updated: 2017/06/23
// Distributor: http://hikimoki.sakura.ne.jp/
// ------------------------------------------------ -----------------------------
// Copyright (c) 2016 tomoaky
// Released under the MIT license.
// http://opensource.org/licenses/mit-license.php
// ================================================ =============================

/ *:
 * @plugindesc Add the ability to use items directly in the map scene.
 *
 * @author tomoaky (http://hikimoki.sakura.ne.jp/)
 *
 * @param shortCutKey
 * @type string
 * @desc Shortcut window call key.
 * Initial value: S
 * @default S
 *
 * @param slotNumber
 * @type number
 * @desc The number of item slots.
 * Initial value: 8
 * @default 8
 *
 * @param windowX
 * @type string
 * @desc The X coordinate of the shortcut window.
 * Initial value: 408 (displayed above the player's head with -1)
 * @ default 408
 *
 * @param windowY
 * @type string
 * @desc The Y coordinate of the shortcut window.
 * Initial value: 0
 * @default 0
 *
 * @param windowWidth
 * @type number
 * @desc Shortcut window width.
 * Initial value: 408
 * @ default 408
 *
 * @param windowHeight
 * @type number
 * @desc The height of the shortcut window.
 * Initial value: 64
 * @default 64
 *
 * @param backgroundType
 * @type number
 * @desc Shortcut window background type.
 * Initial value: 0 (0 = normal / 1 = darken / 2 = transparent)
 * @default 0
 *
 * @param windowHide
 * @type boolean
 * @desc Hide the shortcut window except during operation.
 * Initial value: ON (false = OFF do not hide / true = ON hide)
 * @default true
 *
 * @help
 * TMPlugin --Item shortcut ver1.0.2
 *
 * How to use:
 *
 * Press S while selecting an item in the item scene to shortcut
* A window will open. While this window is open, press the ← / → keys
 * Select a slot and press the enter key (enter / space / Z) to select an item
 * You can register it as a shortcut.
 *
 * In addition to the above method, you can also register using the plug-in command.
 *
 * Shortcut windows can also be opened by pressing the S key in the map scene
 * You can use the item with the same operation as when registering.
 *
 * This plug-in has been confirmed to work with RPG Maker MV Version 1.5.0.
 *
 *
 * Plugin command:
 *
 * setItemSC 0 1
 * Register item 1 in slot 0
 * /

var Imported = Imported || {};
Imported.TMItemShortCut = true;

(function () {
 
 var parameters = PluginManager.parameters ('TMItemShortCut');
 var shortCutKey = parameters ['shortCutKey'] ||'S';
 var slotNumber = + (parameters ['slotNumber'] || 8);
 var windowX = + (parameters ['windowX'] || 408);
 var windowY = + (parameters ['windowY'] || 0);
 var windowWidth = + (parameters ['windowWidth'] || 408);
 var windowHeight = + (parameters ['windowHeight'] || 64);
 var backgroundType = + (parameters ['backgroundType'] || 0);
 var windowHide = JSON.parse (parameters ['windowHide']);

 // ------------------------------------------------ -----------------------------
 // Input
 // //

 Input.keyMapper [shortCutKey.charCodeAt ()] ='shortCut';
 
 Input._isItemShortCut = function () {
 return this.isPressed ('shortCut');
 };

 // ------------------------------------------------ -----------------------------
 // Game_Party
 // //

 // Object initialization
 var _Game_Party_initialize = Game_Party.prototype.initialize;
 Game_Party.prototype.initialize = function () {
 _Game_Party_initialize.call (this);
 this.initShortCut ();
 };
 
 // Initialize shortcut
 Game_Party.prototype.initShortCut = function () {
 this._shortCut = [];
 for (var i = 0; i <slotNumber; i ++) {
 this._shortCut [i] = 0;
 }
 };
 
 // Set of shortcuts
 Game_Party.prototype.setShortCut = function (index, itemId) {
 this._shortCut [index] = itemId;
 };

 // ------------------------------------------------ -----------------------------
 // Game_Player
 // //
 
 // Returns whether the move is possible
 var _Game_Player_canMove = Game_Player.prototype.canMove;
 Game_Player.prototype.canMove = function () {
 if (Input._isItemShortCut ()) return false;
 return _Game_Player_canMove.call (this);
 };
 
 // ------------------------------------------------ -----------------------------
 // Game_Interpreter
 // //

 var _Game_Interpreter_pluginCommand = Game_Interpreter.prototype.pluginCommand;
 Game_Interpreter.prototype.pluginCommand = function (command, args) {
 _Game_Interpreter_pluginCommand.call (this, command, args);
 if (command ==='setItemSC') {
 $ gameParty.setShortCut (+ args [0], + args [1]);
 }
 };
 
 // ------------------------------------------------ -----------------------------
 // Window_Item
 // //
 
 var _Window_ItemList_processHandling = Window_ItemList.prototype.processHandling;
 Window_ItemList.prototype.processHandling = function () {
 _Window_ItemList_processHandling.call (this);
 if (this.isOpen () && this.active && Input.isTriggered ('shortCut')) {
 this.playOkSound ();
 this.updateInputData ();
 this.deactivate ();
 this.callHandler ('menu');
 }
 };
 
 // ------------------------------------------------ -----------------------------
 // Window_ShortCut
 // //
 
 function Window_ShortCut () {
 this.initialize.apply (this, arguments);
 }
 
 Window_ShortCut.prototype = Object.create (Window_Selectable.prototype);
 Window_ShortCut.prototype.constructor = Window_ShortCut;
 
 // Object initialization
 Window_ShortCut.prototype.initialize = function (mapFlag) {
 Window_Selectable.prototype.initialize.call (this, windowX, windowY,
 windowWidth, windowHeight);
 this._mapFlag = mapFlag;
 this._itemIds = [];
 this._data = [];
 this.refresh ();
 this.setBackgroundType (backgroundType);
 if (this._mapFlag) {
 if (windowHide) this.openness = 0;
 } else {
 this.hide ();
 }
 this.select (0);
 };
 
 // Get standard padding
 Window_ShortCut.prototype.standardPadding = function () {
 return 12;
 };

 // Get the number of columns
 Window_ShortCut.prototype.maxCols = function () {
 return slotNumber;
 };
 
 // Get the number of items
 Window_ShortCut.prototype.maxItems = function () {
 return slotNumber;
 };
 
 // Item spacing
 Window_ShortCut.prototype.spacing = function () {
 return 0;
 };

 // Item height
 Window_ShortCut.prototype.itemHeight = function () {
 return 40;
 };

 // Currently selected item
 Window_ShortCut.prototype.item = function () {
 return $ dataItems [$ gameParty._shortCut [this.index ()]];
 };

 // Drawing items
 Window_ShortCut.prototype.drawItem = function (index) {
 Window_Selectable.prototype.drawItem.call (this, index);
 var item = $ dataItems [$ gameParty._shortCut [index]];
 if (item) {
 var rect = this.itemRect (index);
 var n = $ gameParty.numItems (item);
 this.changePaintOpacity (n> 0);
 this.drawIcon (item.iconIndex, rect.x + rect.width / 2 --16,
 rect.y + rect.height / 2 --16);
 if (n> 0) {
 this.contents.fontSize = 20;
 this.contents.drawText ('' + n, rect.x, rect.y + 16, rect.width --2
 24,'right');
 }
 this._itemIds [index] = item.id;
 this._data [index] = n;
 } else {
 this._itemIds [index] = 0;
 this._data [index] = 0;
 }
 };
 
 // Frame update
 Window_ShortCut.prototype.update = function () {
 Window_Selectable.prototype.update.call (this);
 if (this._mapFlag) {
 if (windowX === -1) {
 this.x = $ gamePlayer.screenX () --this.width / 2;
 this.x = this.x.clamp (0, Graphics.width --this.width);
 this.y = $ gamePlayer.screenY () --64 --this.height;
 this.y = this.y.clamp (0, Graphics.height --this.height);
 }
 if (! $ GameMap.isEventRunning () &&! $ GameMessage.isBusy () &&
 Input._isItemShortCut ()) {
 this.activate ();
 if (windowHide) this.open ();
 } else {
 this.deactivate ();
 if (windowHide) this.close ();
 }
 var index = Graphics.frameCount% slotNumber;
 var item = $ dataItems [$ gameParty._shortCut [index]];
 var id = item? item.id: 0;
 if (this._data [index]! == $ gameParty.numItems (item) ||
 this._itemIds [index]! == id) {
 this.redrawItem (index);
 }
 }
 };
 
 Window_ShortCut.prototype.playOkSound = function () {
 };

 // ------------------------------------------------ -----------------------------
 // Scene_Map
 // //
 
 // Create display
 var _Scene_Map_createDisplayObjects = Scene_Map.prototype.createDisplayObjects;
 Scene_Map.prototype.createDisplayObjects = function () {
 _Scene_Map_createDisplayObjects.call (this);
 this.createShortCutWindow ();
 };
 
 // Create a shortcut window
 Scene_Map.prototype.createShortCutWindow = function () {
 this._shortCutWindow = new Window_ShortCut (true);
 this._shortCutWindow.setHandler ('ok', this.onShortCutOk.bind (this));
 this.addChild (this._shortCutWindow);
 };

 // Release
 var _Scene_Map_terminate = Scene_Map.prototype.terminate;
 Scene_Map.prototype.terminate = function () {
 if (! SceneManager.isNextScene (Scene_Battle)) {
 this._shortCutWindow.hide ();
 }
 _Scene_Map_terminate.call (this);
 };
 
 // Menu call judgment
 Scene_Map.prototype.isMenuCalled = function () {
 return Input.isTriggered ('cancel') || TouchInput.isCancelled ();
 };
 
 // Shortcut execution
 Scene_Map.prototype.onShortCutOk = function () {
 var item = this._shortCutWindow.item ();
 var actor = $ gameParty.leader ();
 if (actor.canUse (item) && (item.scope === 0 || this.isItemEffectsValid ())) {
 actor.useItem (item);
 var action = new Game_Action (actor);
 action.setItemObject (item);
 this.itemTargetActors (). forEach (function (target) {
 for (var i = 0; i <action.numRepeats (); i ++) {
 action.apply (target);
 }
 }, this);
 $ gamePlayer.requestAnimation (item.animationId);
 action.applyGlobal ();
 } else {
 SoundManager.playBuzzer ();
 }
 };

 Scene_Map.prototype.itemTargetActors = function () {
 var item = this._shortCutWindow.item ();
 var actor = $ gameParty.leader ();
 var action = new Game_Action (actor);
 action.setItemObject (item);
 if (! action.isForFriend ()) {
 return [];
 } else if (action.isForAll ()) {
 return $ gameParty.members ();
 } else {
 return [actor];
 }
 };

 Scene_Map.prototype.isItemEffectsValid = function () {
 var item = this._shortCutWindow.item ();
 var actor = $ gameParty.leader ();
 var action = new Game_Action (actor);
 action.setItemObject (item);
 return this.itemTargetActors (). Some (function (target) {
 return action.testApply (target);
 }, this);
 };

 // ------------------------------------------------ -----------------------------
 // Scene_Item
 // //

 var _Scene_Item_create = Scene_Item.prototype.create;
 Scene_Item.prototype.create = function () {
 _Scene_Item_create.call (this);
 this.createShortCutWindow ();
 };

 var _Scene_Item_createItemWindow = Scene_Item.prototype.createItemWindow;
 Scene_Item.prototype.createItemWindow = function () {
 _Scene_Item_createItemWindow.call (this);
 this._itemWindow.setHandler ('menu', this.onItemShortCut.bind (this));
 };

 Scene_Item.prototype.createShortCutWindow = function () {
 this._shortCutWindow = new Window_ShortCut (false);
 this._shortCutWindow.setHandler ('ok', this.onShortCutOk.bind (this));
 this._shortCutWindow.setHandler ('cancel', this.onShortCutCancel.bind (this));
 this.addChild (this._shortCutWindow);
 };

 Scene_Item.prototype.onItemShortCut = function () {
 this._shortCutWindow.show ();
 this._shortCutWindow.activate ();
 this._shortCutWindow.select (0);
 var index = this._itemWindow.index ();
 var rect = this._itemWindow.itemRect (index);
 this._shortCutWindow.x = this._itemWindow.x + this._itemWindow.padding + rect.x +
 rect.width / 2 --this._shortCutWindow.width / 2;
 this._shortCutWindow.x = this._shortCutWindow.x.clamp (0, Graphics.boxWidth-
 this._shortCutWindow.width);
 this._shortCutWindow.y = this._itemWindow.y + this._itemWindow.padding + rect.y-
 this._shortCutWindow.height --4;
 };

 Scene_Item.prototype.onShortCutOk = function () {
 if (this.isShortCutOk ()) {
 SoundManager.playEquip ();
 $ gameParty.setShortCut (this._shortCutWindow.index (), this.item (). id);
 this._shortCutWindow.refresh ();
 } else {
 SoundManager.playBuzzer ();
 }
 this._shortCutWindow.activate ();
 };

 Scene_Item.prototype.isShortCutOk = function () {
 var item = this.item ();
 return DataManager.isItem (item)? item.occasion! == 1: false;
 };
 
 Scene_Item.prototype.onShortCutCancel = function () {
 this.hideSubWindow (this._shortCutWindow);
 };

}) ();
